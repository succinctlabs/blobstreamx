// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BinaryMerkleProof is an auto generated low-level Go binding around a user-defined struct.
type BinaryMerkleProof struct {
	SideNodes [][32]byte
	Key       *big.Int
	NumLeaves *big.Int
}

// BlobstreamXInitParameters is an auto generated low-level Go binding around a user-defined struct.
type BlobstreamXInitParameters struct {
	Guardian              common.Address
	Gateway               common.Address
	Height                uint64
	Header                [32]byte
	NextHeaderFunctionId  [32]byte
	HeaderRangeFunctionId [32]byte
}

// DataRootTuple is an auto generated low-level Go binding around a user-defined struct.
type DataRootTuple struct {
	Height   *big.Int
	DataRoot [32]byte
}

// BlobstreamXMetaData contains all metadata concerning the BlobstreamX contract.
var BlobstreamXMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"DataCommitmentNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LatestHeaderNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofBlockRangeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetBlockNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrustedHeaderNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataCommitment\",\"type\":\"bytes32\"}],\"name\":\"DataCommitmentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"}],\"name\":\"HeadUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"trustedBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"trustedHeader\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"targetBlock\",\"type\":\"uint64\"}],\"name\":\"HeaderRangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"trustedBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"trustedHeader\",\"type\":\"bytes32\"}],\"name\":\"NextHeaderRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"trustedBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"trustedHeader\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"targetBlock\",\"type\":\"uint64\"}],\"name\":\"SkipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"trustedBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"trustedHeader\",\"type\":\"bytes32\"}],\"name\":\"StepRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_COMMITMENT_MAX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"blockHeightToHeaderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_trustedBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_targetBlock\",\"type\":\"uint64\"}],\"name\":\"commitHeaderRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_trustedBlock\",\"type\":\"uint64\"}],\"name\":\"commitNextHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_height\",\"type\":\"uint64\"}],\"name\":\"getHeaderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headerRangeFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"header\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHeaderFunctionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRangeFunctionId\",\"type\":\"bytes32\"}],\"internalType\":\"structBlobstreamX.InitParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextHeaderFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetBlock\",\"type\":\"uint64\"}],\"name\":\"requestHeaderRange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNextHeader\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state_dataCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_proofNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"updateGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"}],\"name\":\"updateHeaderRangeId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"}],\"name\":\"updateNextHeaderId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structDataRootTuple\",\"name\":\"_tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"structBinaryMerkleProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612acf6200011f600039600081816109510152818161099101528181610a3001528181610a700152610aff0152612acf6000f3fe6080604052600436106101d85760003560e01c8063593bd11e11610102578063aeeed33e11610095578063d547741f11610064578063d547741f1461056c578063f288a2e21461058c578063f315e844146105c0578063ffa1ad74146105e057600080fd5b8063aeeed33e146104f7578063b9feeae514610524578063ba68937114610544578063c0346b201461054c57600080fd5b806391d14854116100d157806391d14854146104825780639f7fe2b6146104a2578063a217fddf146104c2578063ae543cf5146104d757600080fd5b8063593bd11e146103ff57806359d537ea1461041657806378802ef1146104365780637a5f6d7b1461046c57600080fd5b806324ea54f41161017a5780634710384e116101495780634710384e146103ab5780634f1ef286146103c157806352d1902d146103d457806355ae3f22146103e957600080fd5b806324ea54f4146103295780632f2ff15d1461034b57806336568abe1461036b5780633659cfe61461038b57600080fd5b8063116191b6116101b6578063116191b61461028c5780631e586d81146102c45780631f3302a9146102d9578063248a9ca3146102f957600080fd5b806301ffc9a7146101dd57806307e2da961461021257806308e93ea514610251575b600080fd5b3480156101e957600080fd5b506101fd6101f83660046122b0565b610614565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5060fb5461023990600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610209565b34801561025d57600080fd5b5061027e61026c3660046122f6565b60fd6020526000908152604090205481565b604051908152602001610209565b34801561029857600080fd5b5060fb546102ac906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6102d76102d23660046122f6565b61064b565b005b3480156102e557600080fd5b506101fd6102f43660046123a1565b610839565b34801561030557600080fd5b5061027e6103143660046124c2565b600090815260c9602052604090206001015490565b34801561033557600080fd5b5061027e600080516020612a7a83398151915281565b34801561035757600080fd5b506102d76103663660046124f2565b61089a565b34801561037757600080fd5b506102d76103863660046124f2565b6108c4565b34801561039757600080fd5b506102d76103a636600461251e565b610947565b3480156103b757600080fd5b506102396103e881565b6102d76103cf366004612560565b610a26565b3480156103e057600080fd5b5061027e610af2565b3480156103f557600080fd5b5061027e60fc5481565b34801561040b57600080fd5b5061027e6101005481565b34801561042257600080fd5b506102d76104313660046124c2565b610ba5565b34801561044257600080fd5b5061027e6104513660046122f6565b6001600160401b0316600090815260fd602052604090205490565b34801561047857600080fd5b5061027e60ff5481565b34801561048e57600080fd5b506101fd61049d3660046124f2565b610be1565b3480156104ae57600080fd5b506102d76104bd3660046124c2565b610c0c565b3480156104ce57600080fd5b5061027e600081565b3480156104e357600080fd5b506102d76104f23660046125f0565b610c49565b34801561050357600080fd5b5061027e6105123660046124c2565b60fe6020526000908152604090205481565b34801561053057600080fd5b506102d761053f366004612608565b610e37565b6102d76110ad565b34801561055857600080fd5b506102d761056736600461251e565b611218565b34801561057857600080fd5b506102d76105873660046124f2565b611271565b34801561059857600080fd5b5061027e7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b3480156105cc57600080fd5b506102d76105db3660046122f6565b611296565b3480156105ec57600080fd5b506040805180820182526005815264312e302e3160d81b602082015290516102099190612682565b60006001600160e01b03198216637965db0b60e01b148061064557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60fb54600160a01b90046001600160401b0316600090815260fd60205260409020548061068b576040516352065af960e11b815260040160405180910390fd5b60fb546001600160401b03600160a01b90910481169083161115806106d7575060fb546103e8906106cc90600160a01b90046001600160401b0316846126ab565b6001600160401b0316115b156106f55760405163f277783560e01b815260040160405180910390fd5b60fb5460ff5460408051600160a01b840460c081811b6001600160c01b0319908116602080860191909152602885018990529189901b166048840152835160308185030181526050840185526001600160401b0392831660748501529188166094808501919091528451808503909101815260b49093018452820180516001600160e01b031663b9feeae560e01b179052915163436a61d560e01b81526001600160a01b039094169363436a61d59334936107bd939192909130916207a120906004016126cb565b6000604051808303818588803b1580156107d657600080fd5b505af11580156107ea573d6000803e3d6000fd5b505060fb546040516001600160401b038088169550869450600160a01b90920490911691507fc8c2769e8252a98c11f30f2aa43a6721c1f3c046617bea717ae0999c6507dcfe90600090a45050565b600060fc54841061084c57506000610893565b600084815260fe6020908152604080832054815187518185015292870151838301528151808403830181526060909301909152919061088e90839086906114de565b925050505b9392505050565b600082815260c960205260409020600101546108b581611597565b6108bf83836115a1565b505050565b6001600160a01b03811633146109395760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6109438282611627565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098f5760405162461bcd60e51b81526004016109309061271e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d8600080516020612a33833981519152546001600160a01b031690565b6001600160a01b0316146109fe5760405162461bcd60e51b81526004016109309061276a565b610a078161168e565b60408051600080825260208201909252610a23918391906116d7565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a6e5760405162461bcd60e51b81526004016109309061271e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ab7600080516020612a33833981519152546001600160a01b031690565b6001600160a01b031614610add5760405162461bcd60e51b81526004016109309061276a565b610ae68261168e565b610943828260016116d7565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b925760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610930565b50600080516020612a3383398151915290565b610bbd600080516020612a7a83398151915233610be1565b610bdc5760405163ea79172d60e01b8152336004820152602401610930565b60ff55565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c24600080516020612a7a83398151915233610be1565b610c435760405163ea79172d60e01b8152336004820152602401610930565b61010055565b600054610100900460ff1615808015610c695750600054600160ff909116105b80610c835750303b158015610c83575060005460ff166001145b610ce65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610930565b6000805460ff191660011790558015610d09576000805461ff0019166101001790555b610d2b610d19602084018461251e565b610d26602085018561251e565b611842565b610d3b604083016020840161251e565b60fb80546001600160a01b0319166001600160a01b03929092169190911790556060820180359060fd90600090610d7590604087016122f6565b6001600160401b03166001600160401b0316815260200190815260200160002081905550816040016020810190610dac91906122f6565b60fb80546001600160401b0392909216600160a01b0267ffffffffffffffff60a01b1990921691909117905560808201356101005560a082013560ff55600160fc558015610943576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160401b038216600090815260fd602052604090205480610e6e57604051630f49c3c160e21b815260040160405180910390fd5b6040516001600160c01b031960c085811b821660208401526028830184905284901b16604882015260009060500160408051601f198184030181529082905260fb5460ff5463176e62fd60e01b84529193506000926001600160a01b039091169163176e62fd91610ee4919086906004016127b6565b600060405180830381865afa158015610f01573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2991908101906127cf565b905060008082806020019051810190610f429190612845565b60fb5491935091506001600160401b03600160a01b9091048116908716111580610f93575060fb546103e890610f8890600160a01b90046001600160401b0316886126ab565b6001600160401b0316115b15610fb15760405163f277783560e01b815260040160405180910390fd5b6001600160401b038616600081815260fd6020908152604080832086905560fc54835260fe825291829020849055815192835282018490527f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d910160405180910390a180866001600160401b0316886001600160401b03167f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb60fc5460405161105c91815260200190565b60405180910390a460fc805490600061107483612869565b909155505060fb80546001600160401b03909716600160a01b0267ffffffffffffffff60a01b1990971696909617909555505050505050565b60fb54600160a01b90046001600160401b0316600090815260fd6020526040902054806110ed576040516352065af960e11b815260040160405180910390fd5b60fb546101005460408051600160a01b840460c081901b6001600160c01b0319166020808401919091526028808401889052845180850390910181526048840185526001600160401b03909216606c8085019190915284518085039091018152608c9093018452820180516001600160e01b0316633cc57a1160e21b179052915163436a61d560e01b81526001600160a01b039094169363436a61d59334936111a3939192909130916207a120906004016126cb565b6000604051808303818588803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505060fb54604051859450600160a01b9091046001600160401b031692507f76ede8001988e3e0a3ef39c130769d418d94626cd8f53e08b45541d15526f8cc9150600090a350565b611230600080516020612a7a83398151915233610be1565b61124f5760405163ea79172d60e01b8152336004820152602401610930565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260c9602052604090206001015461128c81611597565b6108bf8383611627565b6001600160401b038116600090815260fd6020526040902054806112cd57604051630f49c3c160e21b815260040160405180910390fd5b6040516001600160c01b031960c084901b1660208201526028810182905260009060480160408051601f198184030181529082905260fb546101005463176e62fd60e01b84529193506000926001600160a01b039091169163176e62fd9161133a919086906004016127b6565b600060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261137f91908101906127cf565b9050600080828060200190518101906113989190612845565b909250905060006113aa876001612882565b60fb549091506001600160401b03600160a01b9091048116908216116113e35760405163f277783560e01b815260040160405180910390fd5b6001600160401b038116600081815260fd6020908152604080832087905560fc54835260fe825291829020859055815192835282018590527f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d910160405180910390a181816001600160401b0316886001600160401b03167f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb60fc5460405161148e91815260200190565b60405180910390a460fc80549060006114a683612869565b909155505060fb80546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055505050505050565b6000600183604001511161150157825151156114fc57506000610893565b611523565b611513836020015184604001516118c6565b8351511461152357506000610893565b826040015183602001511061153a57506000610893565b600061154583611953565b8451519091506000036115715783604001516001036115675784149050610893565b6000915050610893565b600061158b856020015186604001518488600001516119c8565b90951495945050505050565b610a238133611bc1565b6115ab8282610be1565b61094357600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115e33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116318282610be1565b1561094357600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6116b87ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0533610be1565b610a2357604051636744392960e11b8152336004820152602401610930565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561170a576108bf83611c1a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611764575060408051601f3d908101601f19168201909252611761918101906128a2565b60015b6117c75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610930565b600080516020612a3383398151915281146118365760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610930565b506108bf838383611cb6565b600054610100900460ff166118695760405162461bcd60e51b8152600401610930906128bb565b611871611ce1565b611879611ce1565b6118846000836115a1565b6118ae7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05836115a1565b610943600080516020612a7a833981519152826115a1565b60006118d182611d0a565b6118dd90610100612906565b905060006118ec600183612906565b6001901b90506001816118ff9190612906565b841161190b5750610645565b8060010361191d576001915050610645565b61193961192a8286612906565b6119348386612906565b6118c6565b611944906001612919565b915050610645565b5092915050565b60006002600060f81b8360405160200161196e92919061292c565b60408051601f19818403018152908290526119889161295d565b602060405180830381855afa1580156119a5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061064591906128a2565b600083600003611a365760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f742063616c6c20636f6d70757465526f6f744861736820776974686044820152722030206e756d626572206f66206c656176657360681b6064820152608401610930565b83600103611a9457815115611a8d5760405162461bcd60e51b815260206004820152601760248201527f756e657870656374656420696e6e6572206861736865730000000000000000006044820152606401610930565b5081611bb9565b8151600003611ae55760405162461bcd60e51b815260206004820181905260248201527f6578706563746564206174206c65617374206f6e6520696e6e657220686173686044820152606401610930565b6000611af085611d37565b90506000611b0d84600060018751611b089190612906565b611d78565b905081871015611b61576000611b25888488856119c8565b9050611b57818660018851611b3a9190612906565b81518110611b4a57611b4a612979565b6020026020010151611efd565b9350505050611bb9565b6000611b81611b70848a612906565b611b7a858a612906565b88856119c8565b9050611bb38560018751611b959190612906565b81518110611ba557611ba5612979565b602002602001015182611efd565b93505050505b949350505050565b611bcb8282610be1565b61094357611bd881611f7b565b611be3836020611f8d565b604051602001611bf492919061298f565b60408051601f198184030181529082905262461bcd60e51b825261093091600401612682565b6001600160a01b0381163b611c875760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610930565b600080516020612a3383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611cbf83612128565b600082511180611ccc5750805b156108bf57611cdb8383612168565b50505050565b600054610100900460ff16611d085760405162461bcd60e51b8152600401610930906128bb565b565b60005b81816001901b1015611d2b57611d24600182612919565b9050611d0d565b61064581610100612906565b60006001821015611d4757600080fd5b6000611d528361218d565b90506000611d61600183612906565b6001901b90508381036108935760011c9392505050565b606081831115611ddd5760405162461bcd60e51b815260206004820152602a60248201527f496e76616c69642072616e67653a205f626567696e2069732067726561746572604482015269081d1a185b8817d95b9960b21b6064820152608401610930565b8351831180611dec5750835182115b15611e515760405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608401610930565b6000611e5d8484612906565b6001600160401b03811115611e7457611e74612311565b604051908082528060200260200182016040528015611e9d578160200160208202803683370190505b509050835b83811015611ef457858181518110611ebc57611ebc612979565b6020026020010151828683611ed19190612906565b81518110611ee157611ee1612979565b6020908102919091010152600101611ea2565b50949350505050565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f1981840301815290829052611f3b9161295d565b602060405180830381855afa158015611f58573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061089391906128a2565b60606106456001600160a01b03831660145b60606000611f9c836002612a04565b611fa7906002612919565b6001600160401b03811115611fbe57611fbe612311565b6040519080825280601f01601f191660200182016040528015611fe8576020820181803683370190505b509050600360fc1b8160008151811061200357612003612979565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061203257612032612979565b60200101906001600160f81b031916908160001a9053506000612056846002612a04565b612061906001612919565b90505b60018111156120d9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061209557612095612979565b1a60f81b8282815181106120ab576120ab612979565b60200101906001600160f81b031916908160001a90535060049490941c936120d281612a1b565b9050612064565b5083156108935760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610930565b61213181611c1a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606108938383604051806060016040528060278152602001612a53602791396121b0565b6000805b821561064557806121a181612869565b915050600183901c9250612191565b6060600080856001600160a01b0316856040516121cd919061295d565b600060405180830381855af49150503d8060008114612208576040519150601f19603f3d011682016040523d82523d6000602084013e61220d565b606091505b509150915061088e8683838760608315612281578251600003611a8d576001600160a01b0385163b611a8d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610930565b611bb983838151156122965781518083602001fd5b8060405162461bcd60e51b81526004016109309190612682565b6000602082840312156122c257600080fd5b81356001600160e01b03198116811461089357600080fd5b80356001600160401b03811681146122f157600080fd5b919050565b60006020828403121561230857600080fd5b610893826122da565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561234957612349612311565b60405290565b604051606081016001600160401b038111828210171561234957612349612311565b604051601f8201601f191681016001600160401b038111828210171561239957612399612311565b604052919050565b600080600083850360808112156123b757600080fd5b8435935060206040601f19830112156123cf57600080fd5b6123d7612327565b8682013581526040870135828201529350606086013591506001600160401b038083111561240457600080fd5b918601916060838903121561241857600080fd5b61242061234f565b83358281111561242f57600080fd5b8401601f81018a1361244057600080fd5b80358381111561245257612452612311565b8060051b9350612463858501612371565b818152938201850193858101908c86111561247d57600080fd5b928601925b8584101561249b57833582529286019290860190612482565b80855250505050828401358382015260408401356040820152809450505050509250925092565b6000602082840312156124d457600080fd5b5035919050565b80356001600160a01b03811681146122f157600080fd5b6000806040838503121561250557600080fd5b82359150612515602084016124db565b90509250929050565b60006020828403121561253057600080fd5b610893826124db565b60006001600160401b0382111561255257612552612311565b50601f01601f191660200190565b6000806040838503121561257357600080fd5b61257c836124db565b915060208301356001600160401b0381111561259757600080fd5b8301601f810185136125a857600080fd5b80356125bb6125b682612539565b612371565b8181528660208385010111156125d057600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060c0828403121561260257600080fd5b50919050565b6000806040838503121561261b57600080fd5b612624836122da565b9150612515602084016122da565b60005b8381101561264d578181015183820152602001612635565b50506000910152565b6000815180845261266e816020860160208601612632565b601f01601f19169290920160200192915050565b6020815260006108936020830184612656565b634e487b7160e01b600052601160045260246000fd5b6001600160401b0382811682821603908082111561194c5761194c612695565b85815260a0602082015260006126e460a0830187612656565b6001600160a01b038616604084015282810360608401526127058186612656565b91505063ffffffff831660808301529695505050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b828152604060208201526000611bb96040830184612656565b6000602082840312156127e157600080fd5b81516001600160401b038111156127f757600080fd5b8201601f8101841361280857600080fd5b80516128166125b682612539565b81815285602083850101111561282b57600080fd5b61283c826020830160208601612632565b95945050505050565b6000806040838503121561285857600080fd5b505080516020909101519092909150565b60006001820161287b5761287b612695565b5060010190565b6001600160401b0381811683821601908082111561194c5761194c612695565b6000602082840312156128b457600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8181038181111561064557610645612695565b8082018082111561064557610645612695565b6001600160f81b031983168152815160009061294f816001850160208701612632565b919091016001019392505050565b6000825161296f818460208701612632565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129c7816017850160208801612632565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516129f8816028840160208801612632565b01602801949350505050565b808202811582820484141761064557610645612695565b600081612a2a57612a2a612695565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656455435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041a2646970667358221220ad56b321618d3767583c078702e4f5ab82df606623c7c0fa8793e200026db58864736f6c63430008160033",
}

// BlobstreamXABI is the input ABI used to generate the binding from.
// Deprecated: Use BlobstreamXMetaData.ABI instead.
var BlobstreamXABI = BlobstreamXMetaData.ABI

// BlobstreamXBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BlobstreamXMetaData.Bin instead.
var BlobstreamXBin = BlobstreamXMetaData.Bin

// DeployBlobstreamX deploys a new Ethereum contract, binding an instance of BlobstreamX to it.
func DeployBlobstreamX(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BlobstreamX, error) {
	parsed, err := BlobstreamXMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlobstreamXBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlobstreamX{BlobstreamXCaller: BlobstreamXCaller{contract: contract}, BlobstreamXTransactor: BlobstreamXTransactor{contract: contract}, BlobstreamXFilterer: BlobstreamXFilterer{contract: contract}}, nil
}

// BlobstreamX is an auto generated Go binding around an Ethereum contract.
type BlobstreamX struct {
	BlobstreamXCaller     // Read-only binding to the contract
	BlobstreamXTransactor // Write-only binding to the contract
	BlobstreamXFilterer   // Log filterer for contract events
}

// BlobstreamXCaller is an auto generated read-only Go binding around an Ethereum contract.
type BlobstreamXCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlobstreamXTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BlobstreamXTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlobstreamXFilterer is an auto generated log filtering Go binding around an Ethereum contract event.
type BlobstreamXFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlobstreamXSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlobstreamXSession struct {
	Contract     *BlobstreamX      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BlobstreamXCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlobstreamXCallerSession struct {
	Contract *BlobstreamXCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BlobstreamXTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlobstreamXTransactorSession struct {
	Contract     *BlobstreamXTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BlobstreamXRaw is an auto generated low-level Go binding around an Ethereum contract.
type BlobstreamXRaw struct {
	Contract *BlobstreamX // Generic contract binding to access the raw methods on
}

// BlobstreamXCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlobstreamXCallerRaw struct {
	Contract *BlobstreamXCaller // Generic read-only contract binding to access the raw methods on
}

// BlobstreamXTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlobstreamXTransactorRaw struct {
	Contract *BlobstreamXTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBlobstreamX creates a new instance of BlobstreamX, bound to a specific deployed contract.
func NewBlobstreamX(address common.Address, backend bind.ContractBackend) (*BlobstreamX, error) {
	contract, err := bindBlobstreamX(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlobstreamX{BlobstreamXCaller: BlobstreamXCaller{contract: contract}, BlobstreamXTransactor: BlobstreamXTransactor{contract: contract}, BlobstreamXFilterer: BlobstreamXFilterer{contract: contract}}, nil
}

// NewBlobstreamXCaller creates a new read-only instance of BlobstreamX, bound to a specific deployed contract.
func NewBlobstreamXCaller(address common.Address, caller bind.ContractCaller) (*BlobstreamXCaller, error) {
	contract, err := bindBlobstreamX(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXCaller{contract: contract}, nil
}

// NewBlobstreamXTransactor creates a new write-only instance of BlobstreamX, bound to a specific deployed contract.
func NewBlobstreamXTransactor(address common.Address, transactor bind.ContractTransactor) (*BlobstreamXTransactor, error) {
	contract, err := bindBlobstreamX(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXTransactor{contract: contract}, nil
}

// NewBlobstreamXFilterer creates a new log filterer instance of BlobstreamX, bound to a specific deployed contract.
func NewBlobstreamXFilterer(address common.Address, filterer bind.ContractFilterer) (*BlobstreamXFilterer, error) {
	contract, err := bindBlobstreamX(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXFilterer{contract: contract}, nil
}

// bindBlobstreamX binds a generic wrapper to an already deployed contract.
func bindBlobstreamX(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BlobstreamXMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlobstreamX *BlobstreamXRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobstreamX.Contract.BlobstreamXCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlobstreamX *BlobstreamXRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobstreamX.Contract.BlobstreamXTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlobstreamX *BlobstreamXRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobstreamX.Contract.BlobstreamXTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlobstreamX *BlobstreamXCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobstreamX.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlobstreamX *BlobstreamXTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobstreamX.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlobstreamX *BlobstreamXTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobstreamX.Contract.contract.Transact(opts, method, params...)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_BlobstreamX *BlobstreamXCaller) DATACOMMITMENTMAX(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "DATA_COMMITMENT_MAX")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_BlobstreamX *BlobstreamXSession) DATACOMMITMENTMAX() (uint64, error) {
	return _BlobstreamX.Contract.DATACOMMITMENTMAX(&_BlobstreamX.CallOpts)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_BlobstreamX *BlobstreamXCallerSession) DATACOMMITMENTMAX() (uint64, error) {
	return _BlobstreamX.Contract.DATACOMMITMENTMAX(&_BlobstreamX.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.DEFAULTADMINROLE(&_BlobstreamX.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.DEFAULTADMINROLE(&_BlobstreamX.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) GUARDIANROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "GUARDIAN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) GUARDIANROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.GUARDIANROLE(&_BlobstreamX.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) GUARDIANROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.GUARDIANROLE(&_BlobstreamX.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) TIMELOCKROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "TIMELOCK_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) TIMELOCKROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.TIMELOCKROLE(&_BlobstreamX.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) TIMELOCKROLE() ([32]byte, error) {
	return _BlobstreamX.Contract.TIMELOCKROLE(&_BlobstreamX.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_BlobstreamX *BlobstreamXCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_BlobstreamX *BlobstreamXSession) VERSION() (string, error) {
	return _BlobstreamX.Contract.VERSION(&_BlobstreamX.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_BlobstreamX *BlobstreamXCallerSession) VERSION() (string, error) {
	return _BlobstreamX.Contract.VERSION(&_BlobstreamX.CallOpts)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) BlockHeightToHeaderHash(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "blockHeightToHeaderHash", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _BlobstreamX.Contract.BlockHeightToHeaderHash(&_BlobstreamX.CallOpts, arg0)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _BlobstreamX.Contract.BlockHeightToHeaderHash(&_BlobstreamX.CallOpts, arg0)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_BlobstreamX *BlobstreamXCaller) Gateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "gateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_BlobstreamX *BlobstreamXSession) Gateway() (common.Address, error) {
	return _BlobstreamX.Contract.Gateway(&_BlobstreamX.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_BlobstreamX *BlobstreamXCallerSession) Gateway() (common.Address, error) {
	return _BlobstreamX.Contract.Gateway(&_BlobstreamX.CallOpts)
}

// GetHeaderHash is a free data retrieval call binding the contract method 0x78802ef1.
//
// Solidity: function getHeaderHash(uint64 _height) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) GetHeaderHash(opts *bind.CallOpts, _height uint64) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "getHeaderHash", _height)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetHeaderHash is a free data retrieval call binding the contract method 0x78802ef1.
//
// Solidity: function getHeaderHash(uint64 _height) view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) GetHeaderHash(_height uint64) ([32]byte, error) {
	return _BlobstreamX.Contract.GetHeaderHash(&_BlobstreamX.CallOpts, _height)
}

// GetHeaderHash is a free data retrieval call binding the contract method 0x78802ef1.
//
// Solidity: function getHeaderHash(uint64 _height) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) GetHeaderHash(_height uint64) ([32]byte, error) {
	return _BlobstreamX.Contract.GetHeaderHash(&_BlobstreamX.CallOpts, _height)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BlobstreamX.Contract.GetRoleAdmin(&_BlobstreamX.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BlobstreamX.Contract.GetRoleAdmin(&_BlobstreamX.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BlobstreamX *BlobstreamXCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BlobstreamX *BlobstreamXSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BlobstreamX.Contract.HasRole(&_BlobstreamX.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BlobstreamX *BlobstreamXCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BlobstreamX.Contract.HasRole(&_BlobstreamX.CallOpts, role, account)
}

// HeaderRangeFunctionId is a free data retrieval call binding the contract method 0x7a5f6d7b.
//
// Solidity: function headerRangeFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) HeaderRangeFunctionId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "headerRangeFunctionId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HeaderRangeFunctionId is a free data retrieval call binding the contract method 0x7a5f6d7b.
//
// Solidity: function headerRangeFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) HeaderRangeFunctionId() ([32]byte, error) {
	return _BlobstreamX.Contract.HeaderRangeFunctionId(&_BlobstreamX.CallOpts)
}

// HeaderRangeFunctionId is a free data retrieval call binding the contract method 0x7a5f6d7b.
//
// Solidity: function headerRangeFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) HeaderRangeFunctionId() ([32]byte, error) {
	return _BlobstreamX.Contract.HeaderRangeFunctionId(&_BlobstreamX.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_BlobstreamX *BlobstreamXCaller) LatestBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "latestBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_BlobstreamX *BlobstreamXSession) LatestBlock() (uint64, error) {
	return _BlobstreamX.Contract.LatestBlock(&_BlobstreamX.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_BlobstreamX *BlobstreamXCallerSession) LatestBlock() (uint64, error) {
	return _BlobstreamX.Contract.LatestBlock(&_BlobstreamX.CallOpts)
}

// NextHeaderFunctionId is a free data retrieval call binding the contract method 0x593bd11e.
//
// Solidity: function nextHeaderFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) NextHeaderFunctionId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "nextHeaderFunctionId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextHeaderFunctionId is a free data retrieval call binding the contract method 0x593bd11e.
//
// Solidity: function nextHeaderFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) NextHeaderFunctionId() ([32]byte, error) {
	return _BlobstreamX.Contract.NextHeaderFunctionId(&_BlobstreamX.CallOpts)
}

// NextHeaderFunctionId is a free data retrieval call binding the contract method 0x593bd11e.
//
// Solidity: function nextHeaderFunctionId() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) NextHeaderFunctionId() ([32]byte, error) {
	return _BlobstreamX.Contract.NextHeaderFunctionId(&_BlobstreamX.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) ProxiableUUID() ([32]byte, error) {
	return _BlobstreamX.Contract.ProxiableUUID(&_BlobstreamX.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) ProxiableUUID() ([32]byte, error) {
	return _BlobstreamX.Contract.ProxiableUUID(&_BlobstreamX.CallOpts)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCaller) StateDataCommitments(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "state_dataCommitments", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _BlobstreamX.Contract.StateDataCommitments(&_BlobstreamX.CallOpts, arg0)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_BlobstreamX *BlobstreamXCallerSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _BlobstreamX.Contract.StateDataCommitments(&_BlobstreamX.CallOpts, arg0)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_BlobstreamX *BlobstreamXCaller) StateProofNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "state_proofNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_BlobstreamX *BlobstreamXSession) StateProofNonce() (*big.Int, error) {
	return _BlobstreamX.Contract.StateProofNonce(&_BlobstreamX.CallOpts)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_BlobstreamX *BlobstreamXCallerSession) StateProofNonce() (*big.Int, error) {
	return _BlobstreamX.Contract.StateProofNonce(&_BlobstreamX.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BlobstreamX *BlobstreamXCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BlobstreamX *BlobstreamXSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BlobstreamX.Contract.SupportsInterface(&_BlobstreamX.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BlobstreamX *BlobstreamXCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BlobstreamX.Contract.SupportsInterface(&_BlobstreamX.CallOpts, interfaceId)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_BlobstreamX *BlobstreamXCaller) VerifyAttestation(opts *bind.CallOpts, _proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	var out []interface{}
	err := _BlobstreamX.contract.Call(opts, &out, "verifyAttestation", _proofNonce, _tuple, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_BlobstreamX *BlobstreamXSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _BlobstreamX.Contract.VerifyAttestation(&_BlobstreamX.CallOpts, _proofNonce, _tuple, _proof)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_BlobstreamX *BlobstreamXCallerSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _BlobstreamX.Contract.VerifyAttestation(&_BlobstreamX.CallOpts, _proofNonce, _tuple, _proof)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0xb9feeae5.
//
// Solidity: function commitHeaderRange(uint64 _trustedBlock, uint64 _targetBlock) returns()
func (_BlobstreamX *BlobstreamXTransactor) CommitHeaderRange(opts *bind.TransactOpts, _trustedBlock uint64, _targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "commitHeaderRange", _trustedBlock, _targetBlock)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0xb9feeae5.
//
// Solidity: function commitHeaderRange(uint64 _trustedBlock, uint64 _targetBlock) returns()
func (_BlobstreamX *BlobstreamXSession) CommitHeaderRange(_trustedBlock uint64, _targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.CommitHeaderRange(&_BlobstreamX.TransactOpts, _trustedBlock, _targetBlock)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0xb9feeae5.
//
// Solidity: function commitHeaderRange(uint64 _trustedBlock, uint64 _targetBlock) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) CommitHeaderRange(_trustedBlock uint64, _targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.CommitHeaderRange(&_BlobstreamX.TransactOpts, _trustedBlock, _targetBlock)
}

// CommitNextHeader is a paid mutator transaction binding the contract method 0xf315e844.
//
// Solidity: function commitNextHeader(uint64 _trustedBlock) returns()
func (_BlobstreamX *BlobstreamXTransactor) CommitNextHeader(opts *bind.TransactOpts, _trustedBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "commitNextHeader", _trustedBlock)
}

// CommitNextHeader is a paid mutator transaction binding the contract method 0xf315e844.
//
// Solidity: function commitNextHeader(uint64 _trustedBlock) returns()
func (_BlobstreamX *BlobstreamXSession) CommitNextHeader(_trustedBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.CommitNextHeader(&_BlobstreamX.TransactOpts, _trustedBlock)
}

// CommitNextHeader is a paid mutator transaction binding the contract method 0xf315e844.
//
// Solidity: function commitNextHeader(uint64 _trustedBlock) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) CommitNextHeader(_trustedBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.CommitNextHeader(&_BlobstreamX.TransactOpts, _trustedBlock)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.GrantRole(&_BlobstreamX.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.GrantRole(&_BlobstreamX.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xae543cf5.
//
// Solidity: function initialize((address,address,uint64,bytes32,bytes32,bytes32) _params) returns()
func (_BlobstreamX *BlobstreamXTransactor) Initialize(opts *bind.TransactOpts, _params BlobstreamXInitParameters) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "initialize", _params)
}

// Initialize is a paid mutator transaction binding the contract method 0xae543cf5.
//
// Solidity: function initialize((address,address,uint64,bytes32,bytes32,bytes32) _params) returns()
func (_BlobstreamX *BlobstreamXSession) Initialize(_params BlobstreamXInitParameters) (*types.Transaction, error) {
	return _BlobstreamX.Contract.Initialize(&_BlobstreamX.TransactOpts, _params)
}

// Initialize is a paid mutator transaction binding the contract method 0xae543cf5.
//
// Solidity: function initialize((address,address,uint64,bytes32,bytes32,bytes32) _params) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) Initialize(_params BlobstreamXInitParameters) (*types.Transaction, error) {
	return _BlobstreamX.Contract.Initialize(&_BlobstreamX.TransactOpts, _params)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RenounceRole(&_BlobstreamX.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RenounceRole(&_BlobstreamX.TransactOpts, role, account)
}

// RequestHeaderRange is a paid mutator transaction binding the contract method 0x1e586d81.
//
// Solidity: function requestHeaderRange(uint64 _targetBlock) payable returns()
func (_BlobstreamX *BlobstreamXTransactor) RequestHeaderRange(opts *bind.TransactOpts, _targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "requestHeaderRange", _targetBlock)
}

// RequestHeaderRange is a paid mutator transaction binding the contract method 0x1e586d81.
//
// Solidity: function requestHeaderRange(uint64 _targetBlock) payable returns()
func (_BlobstreamX *BlobstreamXSession) RequestHeaderRange(_targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RequestHeaderRange(&_BlobstreamX.TransactOpts, _targetBlock)
}

// RequestHeaderRange is a paid mutator transaction binding the contract method 0x1e586d81.
//
// Solidity: function requestHeaderRange(uint64 _targetBlock) payable returns()
func (_BlobstreamX *BlobstreamXTransactorSession) RequestHeaderRange(_targetBlock uint64) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RequestHeaderRange(&_BlobstreamX.TransactOpts, _targetBlock)
}

// RequestNextHeader is a paid mutator transaction binding the contract method 0xba689371.
//
// Solidity: function requestNextHeader() payable returns()
func (_BlobstreamX *BlobstreamXTransactor) RequestNextHeader(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "requestNextHeader")
}

// RequestNextHeader is a paid mutator transaction binding the contract method 0xba689371.
//
// Solidity: function requestNextHeader() payable returns()
func (_BlobstreamX *BlobstreamXSession) RequestNextHeader() (*types.Transaction, error) {
	return _BlobstreamX.Contract.RequestNextHeader(&_BlobstreamX.TransactOpts)
}

// RequestNextHeader is a paid mutator transaction binding the contract method 0xba689371.
//
// Solidity: function requestNextHeader() payable returns()
func (_BlobstreamX *BlobstreamXTransactorSession) RequestNextHeader() (*types.Transaction, error) {
	return _BlobstreamX.Contract.RequestNextHeader(&_BlobstreamX.TransactOpts)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RevokeRole(&_BlobstreamX.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.RevokeRole(&_BlobstreamX.TransactOpts, role, account)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xc0346b20.
//
// Solidity: function updateGateway(address _gateway) returns()
func (_BlobstreamX *BlobstreamXTransactor) UpdateGateway(opts *bind.TransactOpts, _gateway common.Address) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "updateGateway", _gateway)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xc0346b20.
//
// Solidity: function updateGateway(address _gateway) returns()
func (_BlobstreamX *BlobstreamXSession) UpdateGateway(_gateway common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateGateway(&_BlobstreamX.TransactOpts, _gateway)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xc0346b20.
//
// Solidity: function updateGateway(address _gateway) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) UpdateGateway(_gateway common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateGateway(&_BlobstreamX.TransactOpts, _gateway)
}

// UpdateHeaderRangeId is a paid mutator transaction binding the contract method 0x59d537ea.
//
// Solidity: function updateHeaderRangeId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXTransactor) UpdateHeaderRangeId(opts *bind.TransactOpts, _functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "updateHeaderRangeId", _functionId)
}

// UpdateHeaderRangeId is a paid mutator transaction binding the contract method 0x59d537ea.
//
// Solidity: function updateHeaderRangeId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXSession) UpdateHeaderRangeId(_functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateHeaderRangeId(&_BlobstreamX.TransactOpts, _functionId)
}

// UpdateHeaderRangeId is a paid mutator transaction binding the contract method 0x59d537ea.
//
// Solidity: function updateHeaderRangeId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) UpdateHeaderRangeId(_functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateHeaderRangeId(&_BlobstreamX.TransactOpts, _functionId)
}

// UpdateNextHeaderId is a paid mutator transaction binding the contract method 0x9f7fe2b6.
//
// Solidity: function updateNextHeaderId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXTransactor) UpdateNextHeaderId(opts *bind.TransactOpts, _functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "updateNextHeaderId", _functionId)
}

// UpdateNextHeaderId is a paid mutator transaction binding the contract method 0x9f7fe2b6.
//
// Solidity: function updateNextHeaderId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXSession) UpdateNextHeaderId(_functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateNextHeaderId(&_BlobstreamX.TransactOpts, _functionId)
}

// UpdateNextHeaderId is a paid mutator transaction binding the contract method 0x9f7fe2b6.
//
// Solidity: function updateNextHeaderId(bytes32 _functionId) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) UpdateNextHeaderId(_functionId [32]byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpdateNextHeaderId(&_BlobstreamX.TransactOpts, _functionId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BlobstreamX *BlobstreamXTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BlobstreamX *BlobstreamXSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpgradeTo(&_BlobstreamX.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BlobstreamX *BlobstreamXTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpgradeTo(&_BlobstreamX.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BlobstreamX *BlobstreamXTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BlobstreamX.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BlobstreamX *BlobstreamXSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpgradeToAndCall(&_BlobstreamX.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BlobstreamX *BlobstreamXTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BlobstreamX.Contract.UpgradeToAndCall(&_BlobstreamX.TransactOpts, newImplementation, data)
}

// BlobstreamXAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BlobstreamX contract.
type BlobstreamXAdminChangedIterator struct {
	Event *BlobstreamXAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXAdminChanged represents a AdminChanged event raised by the BlobstreamX contract.
type BlobstreamXAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BlobstreamX *BlobstreamXFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BlobstreamXAdminChangedIterator, error) {

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BlobstreamXAdminChangedIterator{contract: _BlobstreamX.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BlobstreamX *BlobstreamXFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BlobstreamXAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXAdminChanged)
				if err := _BlobstreamX.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BlobstreamX *BlobstreamXFilterer) ParseAdminChanged(log types.Log) (*BlobstreamXAdminChanged, error) {
	event := new(BlobstreamXAdminChanged)
	if err := _BlobstreamX.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the BlobstreamX contract.
type BlobstreamXBeaconUpgradedIterator struct {
	Event *BlobstreamXBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXBeaconUpgraded represents a BeaconUpgraded event raised by the BlobstreamX contract.
type BlobstreamXBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BlobstreamX *BlobstreamXFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BlobstreamXBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXBeaconUpgradedIterator{contract: _BlobstreamX.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BlobstreamX *BlobstreamXFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BlobstreamXBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXBeaconUpgraded)
				if err := _BlobstreamX.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BlobstreamX *BlobstreamXFilterer) ParseBeaconUpgraded(log types.Log) (*BlobstreamXBeaconUpgraded, error) {
	event := new(BlobstreamXBeaconUpgraded)
	if err := _BlobstreamX.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXDataCommitmentStoredIterator is returned from FilterDataCommitmentStored and is used to iterate over the raw logs and unpacked data for DataCommitmentStored events raised by the BlobstreamX contract.
type BlobstreamXDataCommitmentStoredIterator struct {
	Event *BlobstreamXDataCommitmentStored // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXDataCommitmentStoredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXDataCommitmentStored)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXDataCommitmentStored)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXDataCommitmentStoredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXDataCommitmentStoredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXDataCommitmentStored represents a DataCommitmentStored event raised by the BlobstreamX contract.
type BlobstreamXDataCommitmentStored struct {
	ProofNonce     *big.Int
	StartBlock     uint64
	EndBlock       uint64
	DataCommitment [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDataCommitmentStored is a free log retrieval operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_BlobstreamX *BlobstreamXFilterer) FilterDataCommitmentStored(opts *bind.FilterOpts, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (*BlobstreamXDataCommitmentStoredIterator, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXDataCommitmentStoredIterator{contract: _BlobstreamX.contract, event: "DataCommitmentStored", logs: logs, sub: sub}, nil
}

// WatchDataCommitmentStored is a free log subscription operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_BlobstreamX *BlobstreamXFilterer) WatchDataCommitmentStored(opts *bind.WatchOpts, sink chan<- *BlobstreamXDataCommitmentStored, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (event.Subscription, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXDataCommitmentStored)
				if err := _BlobstreamX.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataCommitmentStored is a log parse operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_BlobstreamX *BlobstreamXFilterer) ParseDataCommitmentStored(log types.Log) (*BlobstreamXDataCommitmentStored, error) {
	event := new(BlobstreamXDataCommitmentStored)
	if err := _BlobstreamX.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXHeadUpdateIterator is returned from FilterHeadUpdate and is used to iterate over the raw logs and unpacked data for HeadUpdate events raised by the BlobstreamX contract.
type BlobstreamXHeadUpdateIterator struct {
	Event *BlobstreamXHeadUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXHeadUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXHeadUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXHeadUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXHeadUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXHeadUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXHeadUpdate represents a HeadUpdate event raised by the BlobstreamX contract.
type BlobstreamXHeadUpdate struct {
	BlockNumber uint64
	HeaderHash  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterHeadUpdate is a free log retrieval operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_BlobstreamX *BlobstreamXFilterer) FilterHeadUpdate(opts *bind.FilterOpts) (*BlobstreamXHeadUpdateIterator, error) {

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return &BlobstreamXHeadUpdateIterator{contract: _BlobstreamX.contract, event: "HeadUpdate", logs: logs, sub: sub}, nil
}

// WatchHeadUpdate is a free log subscription operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_BlobstreamX *BlobstreamXFilterer) WatchHeadUpdate(opts *bind.WatchOpts, sink chan<- *BlobstreamXHeadUpdate) (event.Subscription, error) {

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXHeadUpdate)
				if err := _BlobstreamX.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHeadUpdate is a log parse operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_BlobstreamX *BlobstreamXFilterer) ParseHeadUpdate(log types.Log) (*BlobstreamXHeadUpdate, error) {
	event := new(BlobstreamXHeadUpdate)
	if err := _BlobstreamX.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXHeaderRangeRequestedIterator is returned from FilterHeaderRangeRequested and is used to iterate over the raw logs and unpacked data for HeaderRangeRequested events raised by the BlobstreamX contract.
type BlobstreamXHeaderRangeRequestedIterator struct {
	Event *BlobstreamXHeaderRangeRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXHeaderRangeRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXHeaderRangeRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXHeaderRangeRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXHeaderRangeRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXHeaderRangeRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXHeaderRangeRequested represents a HeaderRangeRequested event raised by the BlobstreamX contract.
type BlobstreamXHeaderRangeRequested struct {
	TrustedBlock  uint64
	TrustedHeader [32]byte
	TargetBlock   uint64
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterHeaderRangeRequested is a free log retrieval operation binding the contract event 0xc8c2769e8252a98c11f30f2aa43a6721c1f3c046617bea717ae0999c6507dcfe.
//
// Solidity: event HeaderRangeRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) FilterHeaderRangeRequested(opts *bind.FilterOpts, trustedBlock []uint64, trustedHeader [][32]byte, targetBlock []uint64) (*BlobstreamXHeaderRangeRequestedIterator, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}
	var targetBlockRule []interface{}
	for _, targetBlockItem := range targetBlock {
		targetBlockRule = append(targetBlockRule, targetBlockItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "HeaderRangeRequested", trustedBlockRule, trustedHeaderRule, targetBlockRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXHeaderRangeRequestedIterator{contract: _BlobstreamX.contract, event: "HeaderRangeRequested", logs: logs, sub: sub}, nil
}

// WatchHeaderRangeRequested is a free log subscription operation binding the contract event 0xc8c2769e8252a98c11f30f2aa43a6721c1f3c046617bea717ae0999c6507dcfe.
//
// Solidity: event HeaderRangeRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) WatchHeaderRangeRequested(opts *bind.WatchOpts, sink chan<- *BlobstreamXHeaderRangeRequested, trustedBlock []uint64, trustedHeader [][32]byte, targetBlock []uint64) (event.Subscription, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}
	var targetBlockRule []interface{}
	for _, targetBlockItem := range targetBlock {
		targetBlockRule = append(targetBlockRule, targetBlockItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "HeaderRangeRequested", trustedBlockRule, trustedHeaderRule, targetBlockRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXHeaderRangeRequested)
				if err := _BlobstreamX.contract.UnpackLog(event, "HeaderRangeRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHeaderRangeRequested is a log parse operation binding the contract event 0xc8c2769e8252a98c11f30f2aa43a6721c1f3c046617bea717ae0999c6507dcfe.
//
// Solidity: event HeaderRangeRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) ParseHeaderRangeRequested(log types.Log) (*BlobstreamXHeaderRangeRequested, error) {
	event := new(BlobstreamXHeaderRangeRequested)
	if err := _BlobstreamX.contract.UnpackLog(event, "HeaderRangeRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BlobstreamX contract.
type BlobstreamXInitializedIterator struct {
	Event *BlobstreamXInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXInitialized represents a Initialized event raised by the BlobstreamX contract.
type BlobstreamXInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BlobstreamX *BlobstreamXFilterer) FilterInitialized(opts *bind.FilterOpts) (*BlobstreamXInitializedIterator, error) {

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BlobstreamXInitializedIterator{contract: _BlobstreamX.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BlobstreamX *BlobstreamXFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BlobstreamXInitialized) (event.Subscription, error) {

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXInitialized)
				if err := _BlobstreamX.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BlobstreamX *BlobstreamXFilterer) ParseInitialized(log types.Log) (*BlobstreamXInitialized, error) {
	event := new(BlobstreamXInitialized)
	if err := _BlobstreamX.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXNextHeaderRequestedIterator is returned from FilterNextHeaderRequested and is used to iterate over the raw logs and unpacked data for NextHeaderRequested events raised by the BlobstreamX contract.
type BlobstreamXNextHeaderRequestedIterator struct {
	Event *BlobstreamXNextHeaderRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXNextHeaderRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXNextHeaderRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXNextHeaderRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXNextHeaderRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXNextHeaderRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXNextHeaderRequested represents a NextHeaderRequested event raised by the BlobstreamX contract.
type BlobstreamXNextHeaderRequested struct {
	TrustedBlock  uint64
	TrustedHeader [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNextHeaderRequested is a free log retrieval operation binding the contract event 0x76ede8001988e3e0a3ef39c130769d418d94626cd8f53e08b45541d15526f8cc.
//
// Solidity: event NextHeaderRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) FilterNextHeaderRequested(opts *bind.FilterOpts, trustedBlock []uint64, trustedHeader [][32]byte) (*BlobstreamXNextHeaderRequestedIterator, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "NextHeaderRequested", trustedBlockRule, trustedHeaderRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXNextHeaderRequestedIterator{contract: _BlobstreamX.contract, event: "NextHeaderRequested", logs: logs, sub: sub}, nil
}

// WatchNextHeaderRequested is a free log subscription operation binding the contract event 0x76ede8001988e3e0a3ef39c130769d418d94626cd8f53e08b45541d15526f8cc.
//
// Solidity: event NextHeaderRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) WatchNextHeaderRequested(opts *bind.WatchOpts, sink chan<- *BlobstreamXNextHeaderRequested, trustedBlock []uint64, trustedHeader [][32]byte) (event.Subscription, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "NextHeaderRequested", trustedBlockRule, trustedHeaderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXNextHeaderRequested)
				if err := _BlobstreamX.contract.UnpackLog(event, "NextHeaderRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNextHeaderRequested is a log parse operation binding the contract event 0x76ede8001988e3e0a3ef39c130769d418d94626cd8f53e08b45541d15526f8cc.
//
// Solidity: event NextHeaderRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) ParseNextHeaderRequested(log types.Log) (*BlobstreamXNextHeaderRequested, error) {
	event := new(BlobstreamXNextHeaderRequested)
	if err := _BlobstreamX.contract.UnpackLog(event, "NextHeaderRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the BlobstreamX contract.
type BlobstreamXRoleAdminChangedIterator struct {
	Event *BlobstreamXRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXRoleAdminChanged represents a RoleAdminChanged event raised by the BlobstreamX contract.
type BlobstreamXRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BlobstreamX *BlobstreamXFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BlobstreamXRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXRoleAdminChangedIterator{contract: _BlobstreamX.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BlobstreamX *BlobstreamXFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BlobstreamXRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXRoleAdminChanged)
				if err := _BlobstreamX.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BlobstreamX *BlobstreamXFilterer) ParseRoleAdminChanged(log types.Log) (*BlobstreamXRoleAdminChanged, error) {
	event := new(BlobstreamXRoleAdminChanged)
	if err := _BlobstreamX.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the BlobstreamX contract.
type BlobstreamXRoleGrantedIterator struct {
	Event *BlobstreamXRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXRoleGranted represents a RoleGranted event raised by the BlobstreamX contract.
type BlobstreamXRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BlobstreamXRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXRoleGrantedIterator{contract: _BlobstreamX.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BlobstreamXRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXRoleGranted)
				if err := _BlobstreamX.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) ParseRoleGranted(log types.Log) (*BlobstreamXRoleGranted, error) {
	event := new(BlobstreamXRoleGranted)
	if err := _BlobstreamX.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the BlobstreamX contract.
type BlobstreamXRoleRevokedIterator struct {
	Event *BlobstreamXRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXRoleRevoked represents a RoleRevoked event raised by the BlobstreamX contract.
type BlobstreamXRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BlobstreamXRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXRoleRevokedIterator{contract: _BlobstreamX.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BlobstreamXRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXRoleRevoked)
				if err := _BlobstreamX.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BlobstreamX *BlobstreamXFilterer) ParseRoleRevoked(log types.Log) (*BlobstreamXRoleRevoked, error) {
	event := new(BlobstreamXRoleRevoked)
	if err := _BlobstreamX.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXSkipRequestedIterator is returned from FilterSkipRequested and is used to iterate over the raw logs and unpacked data for SkipRequested events raised by the BlobstreamX contract.
type BlobstreamXSkipRequestedIterator struct {
	Event *BlobstreamXSkipRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXSkipRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXSkipRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXSkipRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXSkipRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXSkipRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXSkipRequested represents a SkipRequested event raised by the BlobstreamX contract.
type BlobstreamXSkipRequested struct {
	TrustedBlock  uint64
	TrustedHeader [32]byte
	TargetBlock   uint64
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSkipRequested is a free log retrieval operation binding the contract event 0x7af6c3870f7322cd03d0dc6102a7fce95f217780a61f0e769b92888a1bab5145.
//
// Solidity: event SkipRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) FilterSkipRequested(opts *bind.FilterOpts, trustedBlock []uint64, trustedHeader [][32]byte, targetBlock []uint64) (*BlobstreamXSkipRequestedIterator, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}
	var targetBlockRule []interface{}
	for _, targetBlockItem := range targetBlock {
		targetBlockRule = append(targetBlockRule, targetBlockItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "SkipRequested", trustedBlockRule, trustedHeaderRule, targetBlockRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXSkipRequestedIterator{contract: _BlobstreamX.contract, event: "SkipRequested", logs: logs, sub: sub}, nil
}

// WatchSkipRequested is a free log subscription operation binding the contract event 0x7af6c3870f7322cd03d0dc6102a7fce95f217780a61f0e769b92888a1bab5145.
//
// Solidity: event SkipRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) WatchSkipRequested(opts *bind.WatchOpts, sink chan<- *BlobstreamXSkipRequested, trustedBlock []uint64, trustedHeader [][32]byte, targetBlock []uint64) (event.Subscription, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}
	var targetBlockRule []interface{}
	for _, targetBlockItem := range targetBlock {
		targetBlockRule = append(targetBlockRule, targetBlockItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "SkipRequested", trustedBlockRule, trustedHeaderRule, targetBlockRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXSkipRequested)
				if err := _BlobstreamX.contract.UnpackLog(event, "SkipRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSkipRequested is a log parse operation binding the contract event 0x7af6c3870f7322cd03d0dc6102a7fce95f217780a61f0e769b92888a1bab5145.
//
// Solidity: event SkipRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader, uint64 indexed targetBlock)
func (_BlobstreamX *BlobstreamXFilterer) ParseSkipRequested(log types.Log) (*BlobstreamXSkipRequested, error) {
	event := new(BlobstreamXSkipRequested)
	if err := _BlobstreamX.contract.UnpackLog(event, "SkipRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXStepRequestedIterator is returned from FilterStepRequested and is used to iterate over the raw logs and unpacked data for StepRequested events raised by the BlobstreamX contract.
type BlobstreamXStepRequestedIterator struct {
	Event *BlobstreamXStepRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXStepRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXStepRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXStepRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXStepRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXStepRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXStepRequested represents a StepRequested event raised by the BlobstreamX contract.
type BlobstreamXStepRequested struct {
	TrustedBlock  uint64
	TrustedHeader [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStepRequested is a free log retrieval operation binding the contract event 0x15d41f96642fb6e48a969bc42162fe91fd581ac702ae4a3c8d7d2b2f3f6bca54.
//
// Solidity: event StepRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) FilterStepRequested(opts *bind.FilterOpts, trustedBlock []uint64, trustedHeader [][32]byte) (*BlobstreamXStepRequestedIterator, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "StepRequested", trustedBlockRule, trustedHeaderRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXStepRequestedIterator{contract: _BlobstreamX.contract, event: "StepRequested", logs: logs, sub: sub}, nil
}

// WatchStepRequested is a free log subscription operation binding the contract event 0x15d41f96642fb6e48a969bc42162fe91fd581ac702ae4a3c8d7d2b2f3f6bca54.
//
// Solidity: event StepRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) WatchStepRequested(opts *bind.WatchOpts, sink chan<- *BlobstreamXStepRequested, trustedBlock []uint64, trustedHeader [][32]byte) (event.Subscription, error) {

	var trustedBlockRule []interface{}
	for _, trustedBlockItem := range trustedBlock {
		trustedBlockRule = append(trustedBlockRule, trustedBlockItem)
	}
	var trustedHeaderRule []interface{}
	for _, trustedHeaderItem := range trustedHeader {
		trustedHeaderRule = append(trustedHeaderRule, trustedHeaderItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "StepRequested", trustedBlockRule, trustedHeaderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXStepRequested)
				if err := _BlobstreamX.contract.UnpackLog(event, "StepRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStepRequested is a log parse operation binding the contract event 0x15d41f96642fb6e48a969bc42162fe91fd581ac702ae4a3c8d7d2b2f3f6bca54.
//
// Solidity: event StepRequested(uint64 indexed trustedBlock, bytes32 indexed trustedHeader)
func (_BlobstreamX *BlobstreamXFilterer) ParseStepRequested(log types.Log) (*BlobstreamXStepRequested, error) {
	event := new(BlobstreamXStepRequested)
	if err := _BlobstreamX.contract.UnpackLog(event, "StepRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlobstreamXUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BlobstreamX contract.
type BlobstreamXUpgradedIterator struct {
	Event *BlobstreamXUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlobstreamXUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobstreamXUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlobstreamXUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlobstreamXUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlobstreamXUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlobstreamXUpgraded represents a Upgraded event raised by the BlobstreamX contract.
type BlobstreamXUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BlobstreamX *BlobstreamXFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BlobstreamXUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BlobstreamX.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BlobstreamXUpgradedIterator{contract: _BlobstreamX.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BlobstreamX *BlobstreamXFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BlobstreamXUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BlobstreamX.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlobstreamXUpgraded)
				if err := _BlobstreamX.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BlobstreamX *BlobstreamXFilterer) ParseUpgraded(log types.Log) (*BlobstreamXUpgraded, error) {
	event := new(BlobstreamXUpgraded)
	if err := _BlobstreamX.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
